// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LINEITEM_TABLES_H_
#define FLATBUFFERS_GENERATED_LINEITEM_TABLES_H_

#include "flatbuffers/flatbuffers.h"

namespace Tables {

struct Date;

struct LINEITEM;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) Date FLATBUFFERS_FINAL_CLASS {
 private:
  int16_t year_;
  int16_t month_;
  int16_t day_;

 public:
  Date() {
    memset(this, 0, sizeof(Date));
  }
  Date(int16_t _year, int16_t _month, int16_t _day)
      : year_(flatbuffers::EndianScalar(_year)),
        month_(flatbuffers::EndianScalar(_month)),
        day_(flatbuffers::EndianScalar(_day)) {
  }
  int16_t year() const {
    return flatbuffers::EndianScalar(year_);
  }
  int16_t month() const {
    return flatbuffers::EndianScalar(month_);
  }
  int16_t day() const {
    return flatbuffers::EndianScalar(day_);
  }
};
FLATBUFFERS_STRUCT_END(Date, 6);

struct LINEITEM FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_L_ORDERKEY = 4,
    VT_L_PARTKEY = 6,
    VT_L_SUPPKEY = 8,
    VT_L_LINENUMBER = 10,
    VT_L_QUANTITY = 12,
    VT_L_EXTENDEDPRICE = 14,
    VT_L_DISCOUNT = 16,
    VT_L_TAX = 18,
    VT_L_RETURNFLAG = 20,
    VT_L_LINESTATUS = 22,
    VT_L_SHIPDATE = 24,
    VT_L_COMMITDATE = 26,
    VT_L_RECEIPTDATE = 28,
    VT_L_SHIPINSTRUCT = 30,
    VT_L_SHIPMODE = 32,
    VT_L_COMMENT = 34
  };
  int32_t L_ORDERKEY() const {
    return GetField<int32_t>(VT_L_ORDERKEY, 0);
  }
  int32_t L_PARTKEY() const {
    return GetField<int32_t>(VT_L_PARTKEY, 0);
  }
  int32_t L_SUPPKEY() const {
    return GetField<int32_t>(VT_L_SUPPKEY, 0);
  }
  int32_t L_LINENUMBER() const {
    return GetField<int32_t>(VT_L_LINENUMBER, 0);
  }
  float L_QUANTITY() const {
    return GetField<float>(VT_L_QUANTITY, 0.0f);
  }
  float L_EXTENDEDPRICE() const {
    return GetField<float>(VT_L_EXTENDEDPRICE, 0.0f);
  }
  float L_DISCOUNT() const {
    return GetField<float>(VT_L_DISCOUNT, 0.0f);
  }
  float L_TAX() const {
    return GetField<float>(VT_L_TAX, 0.0f);
  }
  int8_t L_RETURNFLAG() const {
    return GetField<int8_t>(VT_L_RETURNFLAG, 0);
  }
  int8_t L_LINESTATUS() const {
    return GetField<int8_t>(VT_L_LINESTATUS, 0);
  }
  const Date *L_SHIPDATE() const {
    return GetStruct<const Date *>(VT_L_SHIPDATE);
  }
  const Date *L_COMMITDATE() const {
    return GetStruct<const Date *>(VT_L_COMMITDATE);
  }
  const Date *L_RECEIPTDATE() const {
    return GetStruct<const Date *>(VT_L_RECEIPTDATE);
  }
  const flatbuffers::String *L_SHIPINSTRUCT() const {
    return GetPointer<const flatbuffers::String *>(VT_L_SHIPINSTRUCT);
  }
  const flatbuffers::String *L_SHIPMODE() const {
    return GetPointer<const flatbuffers::String *>(VT_L_SHIPMODE);
  }
  const flatbuffers::String *L_COMMENT() const {
    return GetPointer<const flatbuffers::String *>(VT_L_COMMENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_L_ORDERKEY) &&
           VerifyField<int32_t>(verifier, VT_L_PARTKEY) &&
           VerifyField<int32_t>(verifier, VT_L_SUPPKEY) &&
           VerifyField<int32_t>(verifier, VT_L_LINENUMBER) &&
           VerifyField<float>(verifier, VT_L_QUANTITY) &&
           VerifyField<float>(verifier, VT_L_EXTENDEDPRICE) &&
           VerifyField<float>(verifier, VT_L_DISCOUNT) &&
           VerifyField<float>(verifier, VT_L_TAX) &&
           VerifyField<int8_t>(verifier, VT_L_RETURNFLAG) &&
           VerifyField<int8_t>(verifier, VT_L_LINESTATUS) &&
           VerifyField<Date>(verifier, VT_L_SHIPDATE) &&
           VerifyField<Date>(verifier, VT_L_COMMITDATE) &&
           VerifyField<Date>(verifier, VT_L_RECEIPTDATE) &&
           VerifyOffset(verifier, VT_L_SHIPINSTRUCT) &&
           verifier.Verify(L_SHIPINSTRUCT()) &&
           VerifyOffset(verifier, VT_L_SHIPMODE) &&
           verifier.Verify(L_SHIPMODE()) &&
           VerifyOffset(verifier, VT_L_COMMENT) &&
           verifier.Verify(L_COMMENT()) &&
           verifier.EndTable();
  }
};

struct LINEITEMBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_L_ORDERKEY(int32_t L_ORDERKEY) {
    fbb_.AddElement<int32_t>(LINEITEM::VT_L_ORDERKEY, L_ORDERKEY, 0);
  }
  void add_L_PARTKEY(int32_t L_PARTKEY) {
    fbb_.AddElement<int32_t>(LINEITEM::VT_L_PARTKEY, L_PARTKEY, 0);
  }
  void add_L_SUPPKEY(int32_t L_SUPPKEY) {
    fbb_.AddElement<int32_t>(LINEITEM::VT_L_SUPPKEY, L_SUPPKEY, 0);
  }
  void add_L_LINENUMBER(int32_t L_LINENUMBER) {
    fbb_.AddElement<int32_t>(LINEITEM::VT_L_LINENUMBER, L_LINENUMBER, 0);
  }
  void add_L_QUANTITY(float L_QUANTITY) {
    fbb_.AddElement<float>(LINEITEM::VT_L_QUANTITY, L_QUANTITY, 0.0f);
  }
  void add_L_EXTENDEDPRICE(float L_EXTENDEDPRICE) {
    fbb_.AddElement<float>(LINEITEM::VT_L_EXTENDEDPRICE, L_EXTENDEDPRICE, 0.0f);
  }
  void add_L_DISCOUNT(float L_DISCOUNT) {
    fbb_.AddElement<float>(LINEITEM::VT_L_DISCOUNT, L_DISCOUNT, 0.0f);
  }
  void add_L_TAX(float L_TAX) {
    fbb_.AddElement<float>(LINEITEM::VT_L_TAX, L_TAX, 0.0f);
  }
  void add_L_RETURNFLAG(int8_t L_RETURNFLAG) {
    fbb_.AddElement<int8_t>(LINEITEM::VT_L_RETURNFLAG, L_RETURNFLAG, 0);
  }
  void add_L_LINESTATUS(int8_t L_LINESTATUS) {
    fbb_.AddElement<int8_t>(LINEITEM::VT_L_LINESTATUS, L_LINESTATUS, 0);
  }
  void add_L_SHIPDATE(const Date *L_SHIPDATE) {
    fbb_.AddStruct(LINEITEM::VT_L_SHIPDATE, L_SHIPDATE);
  }
  void add_L_COMMITDATE(const Date *L_COMMITDATE) {
    fbb_.AddStruct(LINEITEM::VT_L_COMMITDATE, L_COMMITDATE);
  }
  void add_L_RECEIPTDATE(const Date *L_RECEIPTDATE) {
    fbb_.AddStruct(LINEITEM::VT_L_RECEIPTDATE, L_RECEIPTDATE);
  }
  void add_L_SHIPINSTRUCT(flatbuffers::Offset<flatbuffers::String> L_SHIPINSTRUCT) {
    fbb_.AddOffset(LINEITEM::VT_L_SHIPINSTRUCT, L_SHIPINSTRUCT);
  }
  void add_L_SHIPMODE(flatbuffers::Offset<flatbuffers::String> L_SHIPMODE) {
    fbb_.AddOffset(LINEITEM::VT_L_SHIPMODE, L_SHIPMODE);
  }
  void add_L_COMMENT(flatbuffers::Offset<flatbuffers::String> L_COMMENT) {
    fbb_.AddOffset(LINEITEM::VT_L_COMMENT, L_COMMENT);
  }
  explicit LINEITEMBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LINEITEMBuilder &operator=(const LINEITEMBuilder &);
  flatbuffers::Offset<LINEITEM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LINEITEM>(end);
    return o;
  }
};

inline flatbuffers::Offset<LINEITEM> CreateLINEITEM(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t L_ORDERKEY = 0,
    int32_t L_PARTKEY = 0,
    int32_t L_SUPPKEY = 0,
    int32_t L_LINENUMBER = 0,
    float L_QUANTITY = 0.0f,
    float L_EXTENDEDPRICE = 0.0f,
    float L_DISCOUNT = 0.0f,
    float L_TAX = 0.0f,
    int8_t L_RETURNFLAG = 0,
    int8_t L_LINESTATUS = 0,
    const Date *L_SHIPDATE = 0,
    const Date *L_COMMITDATE = 0,
    const Date *L_RECEIPTDATE = 0,
    flatbuffers::Offset<flatbuffers::String> L_SHIPINSTRUCT = 0,
    flatbuffers::Offset<flatbuffers::String> L_SHIPMODE = 0,
    flatbuffers::Offset<flatbuffers::String> L_COMMENT = 0) {
  LINEITEMBuilder builder_(_fbb);
  builder_.add_L_COMMENT(L_COMMENT);
  builder_.add_L_SHIPMODE(L_SHIPMODE);
  builder_.add_L_SHIPINSTRUCT(L_SHIPINSTRUCT);
  builder_.add_L_RECEIPTDATE(L_RECEIPTDATE);
  builder_.add_L_COMMITDATE(L_COMMITDATE);
  builder_.add_L_SHIPDATE(L_SHIPDATE);
  builder_.add_L_TAX(L_TAX);
  builder_.add_L_DISCOUNT(L_DISCOUNT);
  builder_.add_L_EXTENDEDPRICE(L_EXTENDEDPRICE);
  builder_.add_L_QUANTITY(L_QUANTITY);
  builder_.add_L_LINENUMBER(L_LINENUMBER);
  builder_.add_L_SUPPKEY(L_SUPPKEY);
  builder_.add_L_PARTKEY(L_PARTKEY);
  builder_.add_L_ORDERKEY(L_ORDERKEY);
  builder_.add_L_LINESTATUS(L_LINESTATUS);
  builder_.add_L_RETURNFLAG(L_RETURNFLAG);
  return builder_.Finish();
}

inline flatbuffers::Offset<LINEITEM> CreateLINEITEMDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t L_ORDERKEY = 0,
    int32_t L_PARTKEY = 0,
    int32_t L_SUPPKEY = 0,
    int32_t L_LINENUMBER = 0,
    float L_QUANTITY = 0.0f,
    float L_EXTENDEDPRICE = 0.0f,
    float L_DISCOUNT = 0.0f,
    float L_TAX = 0.0f,
    int8_t L_RETURNFLAG = 0,
    int8_t L_LINESTATUS = 0,
    const Date *L_SHIPDATE = 0,
    const Date *L_COMMITDATE = 0,
    const Date *L_RECEIPTDATE = 0,
    const char *L_SHIPINSTRUCT = nullptr,
    const char *L_SHIPMODE = nullptr,
    const char *L_COMMENT = nullptr) {
  return Tables::CreateLINEITEM(
      _fbb,
      L_ORDERKEY,
      L_PARTKEY,
      L_SUPPKEY,
      L_LINENUMBER,
      L_QUANTITY,
      L_EXTENDEDPRICE,
      L_DISCOUNT,
      L_TAX,
      L_RETURNFLAG,
      L_LINESTATUS,
      L_SHIPDATE,
      L_COMMITDATE,
      L_RECEIPTDATE,
      L_SHIPINSTRUCT ? _fbb.CreateString(L_SHIPINSTRUCT) : 0,
      L_SHIPMODE ? _fbb.CreateString(L_SHIPMODE) : 0,
      L_COMMENT ? _fbb.CreateString(L_COMMENT) : 0);
}

inline const Tables::LINEITEM *GetLINEITEM(const void *buf) {
  return flatbuffers::GetRoot<Tables::LINEITEM>(buf);
}

inline const Tables::LINEITEM *GetSizePrefixedLINEITEM(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tables::LINEITEM>(buf);
}

inline bool VerifyLINEITEMBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tables::LINEITEM>(nullptr);
}

inline bool VerifySizePrefixedLINEITEMBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tables::LINEITEM>(nullptr);
}

inline void FinishLINEITEMBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::LINEITEM> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLINEITEMBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::LINEITEM> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Tables

#endif  // FLATBUFFERS_GENERATED_LINEITEM_TABLES_H_
